worker_processes ${{NUM_WORKERS}};
error_log stderr notice;
daemon off;
pid logs/nginx.pid;

env JWT_SECRET="${{AUTH_SECRET}}";
env JWT_SECRET_IS_BASE64_ENCODED=true;

events {
  worker_connections 1024;
}

http {
  include src/cosy/server/mime.types;

  server {
    server_name "api.${{HOSTNAME}}";
    listen ${{PORT}};
    lua_code_cache ${{CODE_CACHE}};

    location / {
      set $_url "";
      default_type "application/json";
      add_header "Access-Control-Allow-Origin"      "*";
      add_header "Access-Control-Allow-Credentials" true;
      add_header "Access-Control-Allow-Methods"     "DELETE, HEAD, GET, OPTIONS, POST, PUT";
      add_header "Access-Control-Max-Age"           1728000;
      content_by_lua '
        require "lapis".serve "cosy.server.app"
      ';
    }

    location /proxy {
      internal;
      rewrite_by_lua '
        local req = ngx.req
        for k, v in pairs (req.get_headers ()) do
          if k ~= "content-length" then
            req.clear_header (k)
          end
        end
        if ngx.ctx.headers then
          for k, v in pairs (ngx.ctx.headers) do
            req.set_header (k, v)
          end
        end
      ';
      resolver            8.8.8.8;
      proxy_http_version  1.1;
      proxy_pass          $_url;
    }

  }

  server {
    server_name "www.${{HOSTNAME}}";
    listen ${{PORT}};

    index index.html;

    location / {
      add_header "Access-Control-Allow-Origin"      "api.${{HOSTNAME}}";
      add_header "Access-Control-Allow-Credentials" true;
      add_header "Access-Control-Allow-Methods"     "DELETE, HEAD, GET, OPTIONS, POST, PUT";
      add_header "Access-Control-Max-Age"           1728000;
      alias static/;
    }
    location /js {
      root "${{WWW_PREFIX}}";
      autoindex on;
    }
    location /css {
      root "${{WWW_PREFIX}}";
      autoindex on;
    }
    location /fonts {
      root "${{WWW_PREFIX}}";
      autoindex on;
    }
    location /lua {
      root          /;
      default_type  application/lua;
      set           $target   "";
      access_by_lua '
        local name     = ngx.var.uri:match "/lua/(.*)"
        local filename = package.searchpath (name, package.path)
        if filename then
          ngx.var.target = filename
        else
          ngx.log (ngx.ERR, "failed to locate lua module: " .. name)
          return ngx.exit (404)
        end
      ';
      try_files $target =404;
    }
  }
}
