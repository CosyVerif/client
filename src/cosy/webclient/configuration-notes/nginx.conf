#user luca;
user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

error_log notice;

events {
	worker_connections 768;
	# multi_accept on;
}

# -- Adapted from Alban's configuration.  --L.
http {
  include mime.types;

  # This is important for testing: I don't want to cache files on the server, since
  # I may modify everything quite often, without restarting the server.
  sendfile off;

  server {
#    server_name     localhost;
#    listen          8080;
    listen          8000;
#    root /tmp;
#    root /home/luca/cosy/repos/client/src/cosy/webclient;
    root /home/luca/cosy/repos/client/src/;

    index index.html index.php;

    location /lua {
      # This is important, even if I've not exactly understood where it's used;
      # I guess by try_files .  --L.
      root          /;

      etag          on;
      default_type  "application/lua";
      set           $target   "";
      access_by_lua_block {
        local name     = ngx.var.uri:match "/lua/(.*)"
        function enrich_path (directory)
           package.path = (   directory .. "/?.lua;"
                           .. directory .. "/?/init.lua;"
--                           .. directory .. "/?;" -- FIXME: Likely a bad idea.
                           .. package.path)
        end
        if not ngx.path_already_updated then
           webclient_directory = "/home/luca/cosy/repos/client/src/cosy/webclient/lua"
           -- Add the directory where I keep auxiliary modules only used from the web client,
           -- to be easily require'd.
           package.path = ("/home/luca/cosy/repos/client/src/cosy/webclient/lua/visualiser/?.lua;" .. package.path)

           -- The directory containing the Lua web client source.
           enrich_path ("/home/luca/cosy/repos/client/src/cosy/webclient/lua")
           -- The directory containing Layeredata.
           enrich_path ("/home/luca/cosy/repos/layeredata/src")

           -- A scratch directory holding a copy, intended as temporary, of CosyVerif
           -- models uploaded by clients.  Since this code is never executed on the server
           -- the only security problem should be a potential disk filling attack.
           enrich_path ("/tmp/uploaded-models")

           ngx.path_already_updated = true
        end
        local filename = package.searchpath (name, package.path)
        if filename then
           ngx.var.target = filename
        else
           ngx.status = 404
           -- This is readable from Curl.
           ngx.say ("name: " .. name)
           ngx.say ("filename: " .. filename)
           ngx.say ("package.path: " .. package.path)
           ngx.say ("Couldn't find Lua script")
           ngx.exit (ngx.status)
        end
      } # access_by_lua_block
#      try_files $target =404;
      try_files $target =402;
    } # location /lua

    location ~ [^/]\.php(/|$) {
        include snippets/fastcgi-php.conf;
#        root          /;
        fastcgi_split_path_info ^(.+?\.php)(/.*)$;
        if (!-f $document_root$fastcgi_script_name) {
            return 404;
        }

        # Mitigate https://httpoxy.org/ vulnerabilities
        fastcgi_param HTTP_PROXY "";

#        fastcgi_pass 127.0.0.1:9000;
#        fastcgi_pass unix:/var/run/php5-fpm.sock;
        fastcgi_pass unix:/var/run/php/php7.0-fpm.sock;
#        fastcgi_index index.php test-php.php;
        include fastcgi_params;
    } # location

  }
}
